{"version":3,"sources":["components/Navbar.js","components/CityInputField.js","components/WeatherDisplay.js","components/WeatherDisplayContainer.js","App.js","index.js"],"names":["Navbar","temperatureUnit","handleTemperatureUnit","id","className","onClick","CityInputField","cityInput","handleCityInput","value","onChange","placeholder","WeatherDisplay","weatherInfo","useState","weather","setWeather","getFahrenheit","temperature","fahrenheit","Math","round","getCelcius","celcius","useEffect","name","country","sys","main","feels_like","temp","temp_max","temp_min","description","icon","src","alt","toUpperCase","slice","toLowerCase","WeatherDisplayContainer","App","setWeatherInfo","cityID","setCityID","setLocationInput","setTemperatureUnit","fetchWeather","a","fetch","mode","response","json","weatherData","newCityID","input","cityStringSplit","split","length","cityName","trim","cityTerritory","filteredCity","cityList","filter","cityObj","jsonCityTerritory","jsonCityName","state","getCityID","then","res","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sxk/oBAYeA,G,MATA,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,gBAAiBC,EAA4B,EAA5BA,sBAClC,OACC,yBAAKC,GAAG,UACP,yBAAKC,UAAU,gBAAf,eACA,4BAAQC,QAASH,EAAuBE,UAAU,sBAAlD,UAAoG,MAApBH,EAA2B,UAAW,iBCI1GK,G,MARQ,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,gBACpC,OACC,yBAAKJ,UAAU,mBACd,2BAAOK,MAAOF,EAAWG,SAAUF,EAAiBG,YAAY,uBC4CpDC,G,MA/CQ,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,YAAaZ,EAAsB,EAAtBA,gBAAsB,EAC9Ba,mBAASD,GADqB,mBACrDE,EADqD,KAC5CC,EAD4C,KAEtDC,EAAgB,SAACC,GACtB,IAAMC,EAAwB,IAAXD,EAAwB,OAE3C,OAD0BE,KAAKC,MAAmB,IAAbF,GAAoB,KAGpDG,EAAa,SAACJ,GACnB,IAAMK,EAAUL,EAAc,OAE9B,OADuBE,KAAKC,MAAgB,IAAVE,GAAiB,KAGpDC,qBAAU,WACLX,GACHG,EAAWH,KAEV,CAACA,IACJ,IAAMY,EAAOV,EAAQU,KACfC,EAAUX,EAAQY,IAAID,QAlBgC,EAmBXX,EAAQa,KAAjDC,EAnBoD,EAmBpDA,WAAYC,EAnBwC,EAmBxCA,KAAMC,EAnBkC,EAmBlCA,SAAUC,EAnBwB,EAmBxBA,SAnBwB,EAoBxBjB,EAAQA,QAAQ,GAA5CkB,EApBoD,EAoBpDA,YAAaL,EApBuC,EAoBvCA,KAAMM,EApBiC,EAoBjCA,KAI3B,OACC,yBAAK9B,UAAU,wBACd,yBAAKA,UAAU,mBACd,yBACC+B,IAAG,2CAAsCD,EAAtC,WACHE,IAAI,SACJhC,UAAU,aAGZ,yBAAKA,UAAU,oCACd,6BAAK,yCAAL,IAA6BqB,GAC7B,6BAAK,4CAAL,IAAgCC,GAChC,6BAAK,4CAAL,IAAgCE,GAChC,6BAAK,gDAAL,IAfKK,EAAY,GAAGI,cAAgBJ,EAAYK,MAAM,GAAGC,eAgBzD,6BAAK,+CAAL,IAAwD,MAApBtC,EAA2BgB,EAAcY,GAAcP,EAAWO,GAAtG,QAA0H5B,GAC1H,6BAAK,gDAAL,IAAyD,MAApBA,EAA2BgB,EAAca,GAAQR,EAAWO,GAAjG,QAAqH5B,GACrH,6BAAK,oDAAL,IAA6D,MAApBA,EAA2BgB,EAAcc,GAAYT,EAAWO,GAAzG,QAA6H5B,GAC7H,6BAAK,oDAAL,IAA6D,MAApBA,EAA2BgB,EAAce,GAAYV,EAAWU,GAAzG,QAA2H/B,OCpBhHuC,G,MAnBiB,SAAC,GAAkE,IAAhEjC,EAA+D,EAA/DA,UAAWC,EAAoD,EAApDA,gBAAiBK,EAAmC,EAAnCA,YAAaZ,EAAsB,EAAtBA,gBAC3E,OACC,yBAAKG,UAAU,kBACR,kBAAC,EAAD,CACEG,UAAWA,EACXC,gBAAiBA,IAEjBK,EACA,kBAAC,EAAD,CACAA,YAAaA,EACbZ,gBAAiBA,IAGnB,Q,aC+EMwC,MA3Ff,WAAgB,IAAD,EACyB3B,mBAAS,MADlC,mBACND,EADM,KACO6B,EADP,OAEe5B,mBAAS,SAFxB,mBAEN6B,EAFM,KAEEC,EAFF,OAGyB9B,mBAAS,IAHlC,mBAGNP,EAHM,KAGKsC,EAHL,OAIiC/B,mBAAS,KAJ1C,mBAINb,EAJM,KAIW6C,EAJX,KAKPC,EAAY,uCAAG,WAAO5C,GAAP,iBAAA6C,EAAA,+EAEMC,MAAM,sDAAD,OAC4B9C,EAD5B,2CAE1B,CAAE+C,KAAM,SAJO,cAEXC,EAFW,gBAMSA,EAASC,OANlB,cAMXC,EANW,yBAOVA,GAPU,uGAAH,sDAsElB,OAfA7B,qBAAU,WACR,IArBoBrB,EAqBdmD,EA3CU,SAACC,GACjB,IACMC,EADiBD,EAAMhB,cACUkB,MAAM,KAC7C,GAA+B,IAA3BD,EAAgBE,OAAc,CAChC,IAAMC,EAAWH,EAAgB,GAAGI,OAC9BC,EAAgBL,EAAgB,GAAGI,OACnCE,EAAeC,EAASC,QAAO,SAACC,GACpC,IACIC,EADEC,EAAeF,EAAQxC,KAAKc,cAOlC,OAJE2B,EADoB,KAAlBD,EAAQG,MACUH,EAAQG,MAAM7B,cAEd0B,EAAQvC,QAAQa,cAE/BoB,IAAaQ,GAAgBN,IAAkBK,KAExD,GAAIJ,EAAaJ,OAAS,EACxB,OAAOI,EAAa,GAAG3D,IA0BTkE,CAAU9D,IArBRJ,EAsBPmD,IApBXV,EAAUzC,KAqBX,CAACI,IAEJiB,qBAAU,WACR,IAAuBrB,KAOTwC,IAHVI,EAAa5C,GAAImE,MAAK,SAACC,GAAD,OAAS7B,EAAe6B,QAIjD,CAAC5B,IAEF,yBAAKvC,UAAU,OACb,kBAAC,EAAD,CACEH,gBAAiBA,EACjBC,sBA3BwB,WAE1B4C,EADsB,MAApB7C,EACiB,IAEA,QAyBnB,kBAAC,EAAD,CACEM,UAAWA,EACXC,gBAnCkB,SAACgE,GACvB3B,EAAiB2B,EAAEC,OAAOhE,QAmCtBI,YAAaA,EACbZ,gBAAiBA,MCtFzByE,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,W","file":"static/js/main.8d29a08b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = ({ temperatureUnit, handleTemperatureUnit }) => {\r\n\treturn (\r\n\t\t<div id=\"navbar\">\r\n\t\t\t<div className=\"navbar-title\">WEATHER APP</div>\r\n\t\t\t<button onClick={handleTemperatureUnit} className=\"temperature-toggle\">Toggle {(temperatureUnit === \"F\") ? \"Celcius\" :\"Fahrenheit\" }</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./CityInputField.css\";\r\n\r\nconst CityInputField = ({ cityInput, handleCityInput }) => {\r\n\treturn (\r\n\t\t<div className=\"input-container\">\r\n\t\t\t<input value={cityInput} onChange={handleCityInput} placeholder=\"ex. Houston, Tx\"/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CityInputField;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./WeatherDisplay.css\";\r\n\r\nconst WeatherDisplay = ({ weatherInfo, temperatureUnit }) => {\r\n\tconst [weather, setWeather] = useState(weatherInfo);\r\n\tconst getFahrenheit = (temperature) => {\r\n\t\tconst fahrenheit = temperature * (9 / 5) - 459.67;\r\n\t\tconst roundedFahrenheit = Math.round(fahrenheit * 100) / 100;\r\n\t\treturn roundedFahrenheit;\r\n\t};\r\n\tconst getCelcius = (temperature) => {\r\n\t\tconst celcius = temperature - 273.15;\r\n\t\tconst roundedCelcius = Math.round(celcius * 100) / 100;\r\n\t\treturn roundedCelcius;\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tif (weatherInfo) {\r\n\t\t\tsetWeather(weatherInfo);\r\n\t\t}\r\n\t}, [weatherInfo]);\r\n\tconst name = weather.name;\r\n\tconst country = weather.sys.country;\r\n\tconst { feels_like, temp, temp_max, temp_min } = weather.main;\r\n\tconst { description, main, icon } = weather.weather[0];\r\n\tconst capitalizedDescription = () => {\r\n\t\treturn description[0].toUpperCase() + description.slice(1).toLowerCase();\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"weather-display flex\">\r\n\t\t\t<div className=\"image-container\">\r\n\t\t\t\t<img\r\n\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n\t\t\t\t\talt=\"Cloudy\"\r\n\t\t\t\t\tclassName=\"slideUp\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"weather-details flex align-start\">\r\n\t\t\t\t<div><strong>City:</strong> {name}</div>\r\n\t\t\t\t<div><strong>Country:</strong> {country}</div>\r\n\t\t\t\t<div><strong>Weather:</strong> {main}</div>\r\n\t\t\t\t<div><strong>Description:</strong> {capitalizedDescription()}</div>\r\n\t\t\t\t<div><strong>Feels Like:</strong> {(temperatureUnit === \"F\") ? getFahrenheit(feels_like) : getCelcius(feels_like)}&#176; {temperatureUnit}</div>\r\n\t\t\t\t<div><strong>Temperature:</strong> {(temperatureUnit === \"F\") ? getFahrenheit(temp) : getCelcius(feels_like)}&#176; {temperatureUnit}</div>\r\n\t\t\t\t<div><strong>Max Temperature:</strong> {(temperatureUnit === \"F\") ? getFahrenheit(temp_max) : getCelcius(feels_like)}&#176; {temperatureUnit}</div>\r\n\t\t\t\t<div><strong>Min Temperature:</strong> {(temperatureUnit === \"F\") ? getFahrenheit(temp_min) : getCelcius(temp_min)}&#176; {temperatureUnit}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default WeatherDisplay;\r\n","import React from \"react\";\r\nimport CityInputField from \"./CityInputField\";\r\nimport WeatherDisplay from \"./WeatherDisplay\";\r\nimport \"./WeatherDisplayContainer.css\";\r\n\r\nconst WeatherDisplayContainer = ({ cityInput, handleCityInput, weatherInfo, temperatureUnit }) => {\r\n\treturn (\r\n\t\t<div className=\"main-container\">\r\n\t        <CityInputField\r\n\t          cityInput={cityInput}\r\n\t          handleCityInput={handleCityInput}\r\n\t        />\r\n\t        {(weatherInfo) ?\r\n\t          <WeatherDisplay\r\n\t          weatherInfo={weatherInfo}\r\n\t          temperatureUnit={temperatureUnit}\r\n\t        />\r\n\t        :\r\n\t        null\r\n\t        }    \r\n      </div>\r\n\t);\r\n};\r\n\r\nexport default WeatherDisplayContainer;","import React, { useState, useEffect } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport WeatherDisplayContainer from \"./components/WeatherDisplayContainer\";\nimport cityList from \"./city.list.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const [weatherInfo, setWeatherInfo] = useState(null);\n  const [cityID, setCityID] = useState(4699066);\n  const [cityInput, setLocationInput] = useState(\"\");\n  const [temperatureUnit, setTemperatureUnit] = useState(\"F\");\n  const fetchWeather = async (id) => {\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?id=${id}&APPID=1d5a6501e4b6025eeba951c0e2c62334`,\n        { mode: \"cors\" }\n      );\n      const weatherData = await response.json();\n      return weatherData;\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const getCityID = (input) => {\n    const inputFormatted = input.toLowerCase();\n    const cityStringSplit = inputFormatted.split(\",\");\n    if (cityStringSplit.length === 2) {\n      const cityName = cityStringSplit[0].trim();\n      const cityTerritory = cityStringSplit[1].trim();\n      const filteredCity = cityList.filter((cityObj) => {\n        const jsonCityName = cityObj.name.toLowerCase();\n        let jsonCityTerritory;\n        if (cityObj.state !== \"\") {\n          jsonCityTerritory = cityObj.state.toLowerCase();\n        } else {\n          jsonCityTerritory = cityObj.country.toLowerCase();\n        }\n        return cityName === jsonCityName && cityTerritory === jsonCityTerritory;\n      });\n      if (filteredCity.length > 0) {\n        return filteredCity[0].id;\n      }\n    }\n  };\n\n  const handleCityID = (id) => {\n    if (id) {\n      setCityID(id);\n    } else {\n      return;\n    }\n  };\n\n  const handleCityInput = (e) => {\n    setLocationInput(e.target.value);\n  };\n\n  const handleTemperatureUnit = () => {\n    if (temperatureUnit === \"F\") {\n      setTemperatureUnit(\"C\");\n    } else {\n      setTemperatureUnit(\"F\");\n    }\n  };\n\n  useEffect(() => {\n    const newCityID = getCityID(cityInput);\n    handleCityID(newCityID);\n  }, [cityInput]);\n\n  useEffect(() => {\n    const handleWeather = (id) => {\n      if (!id) {\n        return;\n      } else {\n        fetchWeather(id).then((res) => setWeatherInfo(res));\n      }\n    };\n    handleWeather(cityID);\n  }, [cityID]);\n  return (\n    <div className=\"App\">\n      <Navbar\n        temperatureUnit={temperatureUnit}\n        handleTemperatureUnit={handleTemperatureUnit}\n      />\n      <WeatherDisplayContainer\n        cityInput={cityInput}\n        handleCityInput={handleCityInput}\n        weatherInfo={weatherInfo}\n        temperatureUnit={temperatureUnit}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}